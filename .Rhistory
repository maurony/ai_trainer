shiny::runApp()
new_df
runApp()
input$user_classification_df_rows_selected
runApp()
runApp()
input
input$user_classification_df_rows_selected
runApp()
runApp()
input$user_classification_df_rows_selecte
input$user_classification_df
new_df
input$user_classification_df_rows_selected
input
input$$classification_df_rows_current
input$classification_df_rows_current
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
u_class_df$uid
u_class_df
u_class_df$uid == basename(input$file_name)
which(u_class_df$uid == basename(input$file_name))
which(u_class_df$uid == basename(input$file_name))
u_class_df$uid
basename(input$file_name)
runApp()
runApp()
file_id
input$file_name
which(u_class_df$uid == file_id)
length(which(u_class_df$uid == file_id))>0
is.na(which(u_class_df$uid == file_id))
is.na(which(u_class_df$uid == file_id)) == F
F = F
F == F
u_class_df
user_classification_df()
u_class_df
length(existing_id) > 0
u_class_df
df <- data_frame(
uid = file_id,
station = 'tbd',
from = format(window_limits[1], format = '%Y-%m-%d %H:%M:%OS4'),
to = format(window_limits[2], format = '%Y-%m-%d %H:%M:%OS4'),
is_anomaly = 1,
class = 'tbd'
)
df <- data_frame(
uid = file_id,
station = 'tbd',
from = 1),
to =1,
is_anomaly = 1,
class = 'tbd'
)
df <- data_frame(
uid = file_id,
station = 'tbd',
from = 1,
to =1,
is_anomaly = 1,
class = 'tbd'
)
df <- data_frame(
uid = 1,
station = 'tbd',
from = 1,
to =1,
is_anomaly = 1,
class = 'tbd'
)
get(ds, 'uid')
get(df, 'uid')
get(df, "uid")
`$`(df, "uid")
runApp()
df
df
id
df %>%
filter(
col != id
)
df %>%
filter(
col != id
)
runApp()
runApp()
runApp()
runApp()
remove_exisiting_rows(u_class_df, 'uid', file_id)
sub('\\..*$', '', basename(input$file_name))
file_id
runApp()
u_class_df
file_id
user_classification_df()
runApp()
u_class_df
runApp()
u_class_df
runApp()
runApp()
runApp()
runApp()
runApp()
raw_df
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
u_class_df <- data_frame(
uid = file_id,
station = 'tbd',
from = format(window_limits[1], format = '%Y-%m-%d %H:%M:%OS4'),
to = format(window_limits[2], format = '%Y-%m-%d %H:%M:%OS4'),
is_anomaly = 1,
class = 'tbd'
)
u_class_df <- data_frame(
uid = file_id,
station = 'tbd',
from = 1,
to = 1,
is_anomaly = 1,
class = 'tbd'
)
u_class_df <- data_frame(
uid = 'sdfa',
station = 'tbd',
from = 1,
to = 1,
is_anomaly = 1,
class = 'tbd'
)
remove_exisiting_rows(df = u_class_df, col = 'uid', id = file_id)
remove_exisiting_rows(df = u_class_df, col = 'uid', id = 'sdfa')
remove_exisiting_rows(df = u_class_df, col = 'uid', id = 'sdfa')
`$`(u_class_df, 'uid')
col = 'uid'
remove_exisiting_rows <- function(df, col, id) {
existing_id <- which(`$`(df, as.character(col)) == id)
if (length(existing_id) > 0) {
df <- df[-existing_id, ]
}
return(df)
}
remove_exisiting_rows(df = u_class_df, col = 'uid', id = 'sdfa')
get(u_class_df, 'uid')
remove_exisiting_rows(df = u_class_df, col = 'uid', id = 'sdfa')
remove_exisiting_rows <- function(df, id) {
existing_id <- which(df$uid == id)
if (length(existing_id) > 0) {
df <- df[-existing_id, ]
}
return(df)
}
remove_exisiting_rows(df = u_class_df, col = 'uid', id = 'sdfa')
remove_exisiting_rows(df = u_class_df, id = 'sdfa')
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
??storage_upload
runApp()
install.packages('shinyalert')
runApp()
runApp()
input$classification_df_rows_current
input$classification_df_rows_selected
runApp()
input$classification_df_rows_selected
runApp()
shinyalert::shinyalert("Success", "File has been transfered to Azure.", type = "success")
??shinyalert()
runApp()
shiny::runApp('C:/Users/yvesm/OneDrive - Trivadis AG/coding/ts_annotation/azuread_dev')
runApp('C:/Users/yvesm/OneDrive - Trivadis AG/coding/ts_annotation/azuread_dev')
